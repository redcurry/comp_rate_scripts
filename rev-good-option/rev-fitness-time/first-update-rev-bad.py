# Given a file generated by rev-fitness-time.sh (with header)
# or by the concatenation of such files,
# prints out the update at which the reversion was not beneficial

import sys
import pandas


NOT_BENEFICIAL_FITNESS = 1.001
LAST_UPDATE = 10000


def main():
  try:
    data_path = sys.argv[1]
  except IndexError:
    print 'Arguments: data_path'
    exit()

  data = pandas.read_csv(data_path, sep = ' ')

  for replicate in replicates(data):
    subdata = data[data['Replicate'] == replicate]
    print int(replicate), int(first_update_rev_bad(subdata))


def replicates(data):
  return sorted(set([row['Replicate'] for row_index, row in data.iterrows()]))


def first_update_rev_bad(data):
  for row_index, row in data.iterrows():
    if row['RevFit'] < NOT_BENEFICIAL_FITNESS:
      return row['Update']
  return LAST_UPDATE


main()
